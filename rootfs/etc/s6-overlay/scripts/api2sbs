#!/command/with-contenv bash
#shellcheck shell=bash disable=SC1091,SC2154
set -o pipefail
source /scripts/common

SBS_SERVER="${SBS_SERVER:-ultrafeeder}"
SBS_PORT="${SBS_PORT:-32006}"
STATS_INTERVAL="${STATS_INTERVAL:-300}"

# shellcheck disable=SC2016
if [[ -z "$API_URL" ]]; then API_URL='https://api.airplanes.live/v2/point/{LAT}/{LON}/{DIST}'; fi

if [[ -z "${LOCATIONS}" ]]; then
  "${s6wrap[@]}" echo "[FATAL] LOCATIONS is not set. Container halted"
  exec sleep infinity
fi

#check if authentication is correctly set
if [[ -n "$API_AUTH" ]]; then
  TEST_URL="${API_URL//\{LAT\}/0}"; TEST_URL="${TEST_URL//\{LON\}/0}"; TEST_URL="${TEST_URL//\{DIST\}/0}"
  if ! msg="$(curl -sSL -H "api-auth: $API_AUTH" "$TEST_URL")" \
      || [[ "$msg" = '{"NO_AUTH"}' ]] \
      || [[ "$(jq -r '.ac[0].reg' <<< "$msg")" != "null" ]]; then
    "${s6wrap[@]}" echo "[FATAL] Container Halted: API_AUTH is not set correctly. To debug, run the following command from the Linux command line:"
    "${s6wrap[@]}" echo "        curl -sSL -H \"api-auth: $API_AUTH\" \"$TEST_URL\""
    exec sleep infinity
  fi
  AUTH_HEADER="-H 'api-auth: $API_AUTH'"
fi

readarray -d ";" -t loc <<< "${LOCATIONS// /}"

LOOPTIME="${LOOPTIME:-$(( ${#loc[@]} * 3 ))}"
if (( LOOPTIME < 15 )); then LOOPTIME=15; fi

if [[ "${API_URL: -1}" == "/" ]]; then API_URL="${API_URL:0:-1}"; fi
if [[ "${API_URL:0:4}" != "http" ]]; then API_URL="https://${API_URL}"; fi

WAITTIME="$(( LOOPTIME / ${#loc[@]} ))"

# Open a FD so we can write to the port
backoff=1
while ! exec 3>/dev/tcp/"$SBS_SERVER"/"$SBS_PORT"; do
  exec 3>&- || true
  "${s6wrap[@]}" echo "[WARNING] Could not open a connection to the SBS server at $SBS_SERVER:$SBS_PORT. Trying again in $backoff seconds."
  sleep $backoff
  backoff=$(( backoff * 2 ))
  if (( backoff > 60 )); then
    backoff=60
  fi
done
"${s6wrap[@]}" echo "[INFO] Successfully opened a connection to $SBS_SERVER:$SBS_PORT"

for l in "${loc[@]}"; do
  l="${l//[^0-9,/-.]/}"; l="${l//$'\n'/}"
  if [[ -n "${l}" ]]; then
    { "${s6wrap[@]}" echo "[INFO] Starting data retrieval for Lat,Lon,Dist=\"$l\""
      lat="${l%%,*}"; l="${l#*,}"
      lon="${l%%,*}"; l="${l#*,}"
      dist="${l%%,*}"
      API_URL="${API_URL//\{LAT\}/$lat}"; API_URL="${API_URL//\{LON\}/$lon}"; API_URL="${API_URL//\{DIST\}/$dist}"
      while true; do
        if ! chk_disabled "$STATS_INTERVAL"; then        
          if msg="$(xargs curl <<< "-sSL ${AUTH_HEADER} ${API_URL}" | \
                jq -r '.ac[] | "MSG,3,1,1,\(.hex|ascii_upcase),1,'"$(date +%Y-%m-%d,%H:%M:%S,%Y-%m-%d,%H:%M:%S)"',\(.flight),\(.alt_baro),\(.gs),\(.track),\(.lat),\(.lon),,\(.squawk),,,,\(if (.alt_baro | tostring) == "ground" then "-1" else "0" end)"' | \
                sed 's/null//;s/ground/0/')"; then
            echo "$msg" >&3
            echo "$msg" >> "/tmp/sbs_msgs_cache.$l"
          else
            "${s6wrap[@]}" echo "[ERROR] Could not retrieve data for Lat,Lon,Dist=\"$l\""
            break
          fi
        else
          if ! xargs curl <<< "-sSL ${AUTH_HEADER} ${API_URL}" | \
                jq -r '.ac[] | "MSG,3,1,1,\(.hex|ascii_upcase),1,'"$(date +%Y-%m-%d,%H:%M:%S,%Y-%m-%d,%H:%M:%S)"',\(.flight),\(.alt_baro),\(.gs),\(.track),\(.lat),\(.lon),,\(.squawk),,,,\(if (.alt_baro | tostring) == "ground" then "-1" else "0" end)"' | \
                sed 's/null//;s/ground/0/' >&3; then
            "${s6wrap[@]}" echo "[ERROR] Could not retrieve data for Lat,Lon,Dist=\"$l\""
            break
          fi
        fi
        sleep "$LOOPTIME"
      done
    } &
    sleep "$WAITTIME"
  fi
done

"${s6wrap[@]}" echo "[INFO] Data Retrieval started for all locations"

wait -n
exec 3>&-
"${s6wrap[@]}" echo "[ERROR] Data Retrieval failed. Restarting..."
